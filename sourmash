#! /usr/bin/env python2
from __future__ import print_function
import sys
import os
import argparse
import screed
import sourmash
import sourmash_signature as sig

DEFAULT_K=32

class SourmashCommands(object):
   def __init__(self):
      parser = argparse.ArgumentParser(description='RNAseq signatures',
                                       usage='''sourmash <command> [<args>]

Commands can be:

   compute <filenames>      Compute signatures for sequences in these files

.
''')
      parser.add_argument('command')
      args = parser.parse_args(sys.argv[1:2])
      if not hasattr(self, args.command):
         print('Unrecognized command')
         parser.print_help()
         sys.exit(1)
         
      cmd = getattr(self, args.command)
      cmd()
      
   def compute(self):
      parser = argparse.ArgumentParser()
      parser.add_argument('filenames', nargs='+')
      parser.add_argument('-k', '--ksizes',
                          default=str(DEFAULT_K),
                          help='comma-separated list of k-mer sizes')
      parser.add_argument('-f', '--force', action='store_true')
      args = parser.parse_args(sys.argv[2:])
      
      print('computing signatures for files:', args.filenames)

      ksizes = args.ksizes
      if ',' in ksizes:
         ksizes = ksizes.split(',')
         ksizes = list(map(int, ksizes))
      else:
         ksizes = [int(ksizes)]

      print('Computing signature for ksizes: %s' % str(ksizes))

      for filename in args.filenames:
         sigfile = os.path.basename(filename) + '.sig'
         if os.path.exists(sigfile) and not args.force:
            print('skipping', filename, '- already done')
            continue

         Elist = []
         for k in ksizes:
            E = sourmash.Estimators(ksize=k, n=500)
            Elist.append(E)

         for n, record in enumerate(screed.open(filename)):
            if n % 10000 == 0:
               print('...', filename, n)
            if 0 and n % 100000 == 0 and n:
               siglist = []
               for E in Elist:
                  signature = sig.SourmashSignature('titus@idyll.org',
                                                 E,
                                                 filename=filename)
                  siglist.append(signature)

               data = sig.save_signatures(siglist)
               fp = open(sigfile + '.%d' % n, 'w')
               fp.write(data)
               fp.close()

            s = record.sequence
#            for i in 'R', 'W', 'Y': # sanitizing refseq mRNA
#               s = s.replace(i, 'N')
            for E in Elist:
               E.add_sequence(s)

         siglist = []
         for E in Elist:
            signature = sig.SourmashSignature('titus@idyll.org',
                                              E,
                                              filename=filename)
            siglist.append(signature)

         data = sig.save_signatures(siglist)
         fp = open(sigfile, 'w')
         fp.write(data)
         fp.close()


def main():
   SourmashCommands()

if __name__ == '__main__':
   main()
